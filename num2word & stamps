# FROM UDACITY SECTION 2 PROBLEM SET
#Define a procedure, stamps, which takes as its input a positive integer in
# pence and returns the number of 5p, 2p and 1p stamps (p is pence) required 
# to make up that value. The return value should be a tuple of three numbers 
# (that is, your return statement should be followed by the number of 5p,
# the number of 2p, and the nuber of 1p stamps).
#
# Your answer should use as few total stamps as possible by first using as 
# many 5p stamps as possible, then 2 pence stamps and finally 1p stamps as 
# needed to make up the total.
#
#
def num2words(num):
    if num == 0:
        return 'no'
    if num == 1:
        return 'one'
    if num == 2:
        return 'two'
    if num == 3:
        return 'three'
    if num == 4:
        return 'four'
    if num == 5:
        return 'five'
    if num == 6:
        return 'six'     
    if num == 7:
        return 'seven'
    if num == 8:
        print 'eight'
    if num == 9:
        return 'nine'
    if num == 10:
        return 'ten'    
        
def plural(n):
    if n == 1:
        return 'stamp'
    else: return 'stamps'
        
def stamps(p):
    
    if p >= 5:
        div5 = p//5
        p = p - (div5*5)
    else: div5 = 0
    if p >= 2:
        div2 = p//2
        p = p - (div2 * 2)
    else: div2 = 0
    if p >= 1:
        div1 = p//1
        p = p - (div1*1)
    else: div1 = 0

        
    return '('+str(div5)+', '+str(div2)+', '+str(div1)+') '+ (num2words(div5))+' 5p '+plural(div5)+', '+(num2words(div2))+' 2p '+plural(div2)+' and '+(num2words(div1))+' 1p '+plural(div1)
    

    

    # 4 test cases below. Change test cases to fit new peramitters before altering code.


print stamps(8)
#>>> (1, 1, 1)  # one 5p stamp, one 2p stamp and one 1p stamp
print stamps(5)
#>>> (1, 0, 0)  # one 5p stamp, no 2p stamps and no 1p stamps
print stamps(29)
#>>> (5, 2, 0)  # five 5p stamps, two 2p stamps and no 1p stamps
print stamps(0)
#>>> (0, 0, 0) # no 5p stamps, no 2p stamps and no 1p stamps
